/*
FED API

FED API is designed to create FEDACH and FEDWIRE dictionaries.  The FEDACH dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive ACH entries.  The FEDWIRE dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive WIRE entries.  This project implements a modern REST HTTP API for FEDACH Dictionary and FEDWIRE Dictionary.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ACHLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACHLocation{}

// ACHLocation ACHLocation is the FEDACH delivery address
type ACHLocation struct {
	// Street Address
	Address *string `json:"address,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// State
	State *string `json:"state,omitempty"`
	// Postal Code
	PostalCode *string `json:"postalCode,omitempty"`
	// Postal Code Extension
	PostalExtension *string `json:"postalExtension,omitempty"`
}

// NewACHLocation instantiates a new ACHLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACHLocation() *ACHLocation {
	this := ACHLocation{}
	return &this
}

// NewACHLocationWithDefaults instantiates a new ACHLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACHLocationWithDefaults() *ACHLocation {
	this := ACHLocation{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ACHLocation) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHLocation) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ACHLocation) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ACHLocation) SetAddress(v string) {
	o.Address = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *ACHLocation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHLocation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *ACHLocation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *ACHLocation) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ACHLocation) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHLocation) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ACHLocation) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ACHLocation) SetState(v string) {
	o.State = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *ACHLocation) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHLocation) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *ACHLocation) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *ACHLocation) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetPostalExtension returns the PostalExtension field value if set, zero value otherwise.
func (o *ACHLocation) GetPostalExtension() string {
	if o == nil || IsNil(o.PostalExtension) {
		var ret string
		return ret
	}
	return *o.PostalExtension
}

// GetPostalExtensionOk returns a tuple with the PostalExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHLocation) GetPostalExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.PostalExtension) {
		return nil, false
	}
	return o.PostalExtension, true
}

// HasPostalExtension returns a boolean if a field has been set.
func (o *ACHLocation) HasPostalExtension() bool {
	if o != nil && !IsNil(o.PostalExtension) {
		return true
	}

	return false
}

// SetPostalExtension gets a reference to the given string and assigns it to the PostalExtension field.
func (o *ACHLocation) SetPostalExtension(v string) {
	o.PostalExtension = &v
}

func (o ACHLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACHLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postalCode"] = o.PostalCode
	}
	if !IsNil(o.PostalExtension) {
		toSerialize["postalExtension"] = o.PostalExtension
	}
	return toSerialize, nil
}

type NullableACHLocation struct {
	value *ACHLocation
	isSet bool
}

func (v NullableACHLocation) Get() *ACHLocation {
	return v.value
}

func (v *NullableACHLocation) Set(val *ACHLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableACHLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableACHLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACHLocation(val *ACHLocation) *NullableACHLocation {
	return &NullableACHLocation{value: val, isSet: true}
}

func (v NullableACHLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACHLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
