/*
FED API

FED API is designed to create FEDACH and FEDWIRE dictionaries.  The FEDACH dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive ACH entries.  The FEDWIRE dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive WIRE entries.  This project implements a modern REST HTTP API for FEDACH Dictionary and FEDWIRE Dictionary.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WIREDictionary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WIREDictionary{}

// WIREDictionary Search results containing WIREDictionary of Participants
type WIREDictionary struct {
	WIREParticipants []WIREParticipant `json:"WIREParticipants,omitempty"`
}

// NewWIREDictionary instantiates a new WIREDictionary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWIREDictionary() *WIREDictionary {
	this := WIREDictionary{}
	return &this
}

// NewWIREDictionaryWithDefaults instantiates a new WIREDictionary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWIREDictionaryWithDefaults() *WIREDictionary {
	this := WIREDictionary{}
	return &this
}

// GetWIREParticipants returns the WIREParticipants field value if set, zero value otherwise.
func (o *WIREDictionary) GetWIREParticipants() []WIREParticipant {
	if o == nil || IsNil(o.WIREParticipants) {
		var ret []WIREParticipant
		return ret
	}
	return o.WIREParticipants
}

// GetWIREParticipantsOk returns a tuple with the WIREParticipants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WIREDictionary) GetWIREParticipantsOk() ([]WIREParticipant, bool) {
	if o == nil || IsNil(o.WIREParticipants) {
		return nil, false
	}
	return o.WIREParticipants, true
}

// HasWIREParticipants returns a boolean if a field has been set.
func (o *WIREDictionary) HasWIREParticipants() bool {
	if o != nil && !IsNil(o.WIREParticipants) {
		return true
	}

	return false
}

// SetWIREParticipants gets a reference to the given []WIREParticipant and assigns it to the WIREParticipants field.
func (o *WIREDictionary) SetWIREParticipants(v []WIREParticipant) {
	o.WIREParticipants = v
}

func (o WIREDictionary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WIREDictionary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WIREParticipants) {
		toSerialize["WIREParticipants"] = o.WIREParticipants
	}
	return toSerialize, nil
}

type NullableWIREDictionary struct {
	value *WIREDictionary
	isSet bool
}

func (v NullableWIREDictionary) Get() *WIREDictionary {
	return v.value
}

func (v *NullableWIREDictionary) Set(val *WIREDictionary) {
	v.value = val
	v.isSet = true
}

func (v NullableWIREDictionary) IsSet() bool {
	return v.isSet
}

func (v *NullableWIREDictionary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWIREDictionary(val *WIREDictionary) *NullableWIREDictionary {
	return &NullableWIREDictionary{value: val, isSet: true}
}

func (v NullableWIREDictionary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWIREDictionary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
