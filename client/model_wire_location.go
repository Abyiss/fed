/*
FED API

FED API is designed to create FEDACH and FEDWIRE dictionaries.  The FEDACH dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive ACH entries.  The FEDWIRE dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive WIRE entries.  This project implements a modern REST HTTP API for FEDACH Dictionary and FEDWIRE Dictionary.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WIRELocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WIRELocation{}

// WIRELocation WIRELocation is the FEDWIRE delivery address
type WIRELocation struct {
	// City
	City *string `json:"city,omitempty"`
	// State
	State *string `json:"state,omitempty"`
}

// NewWIRELocation instantiates a new WIRELocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWIRELocation() *WIRELocation {
	this := WIRELocation{}
	return &this
}

// NewWIRELocationWithDefaults instantiates a new WIRELocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWIRELocationWithDefaults() *WIRELocation {
	this := WIRELocation{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *WIRELocation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WIRELocation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *WIRELocation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *WIRELocation) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *WIRELocation) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WIRELocation) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *WIRELocation) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *WIRELocation) SetState(v string) {
	o.State = &v
}

func (o WIRELocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WIRELocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableWIRELocation struct {
	value *WIRELocation
	isSet bool
}

func (v NullableWIRELocation) Get() *WIRELocation {
	return v.value
}

func (v *NullableWIRELocation) Set(val *WIRELocation) {
	v.value = val
	v.isSet = true
}

func (v NullableWIRELocation) IsSet() bool {
	return v.isSet
}

func (v *NullableWIRELocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWIRELocation(val *WIRELocation) *NullableWIRELocation {
	return &NullableWIRELocation{value: val, isSet: true}
}

func (v NullableWIRELocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWIRELocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
