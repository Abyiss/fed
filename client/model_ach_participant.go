/*
FED API

FED API is designed to create FEDACH and FEDWIRE dictionaries.  The FEDACH dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive ACH entries.  The FEDWIRE dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive WIRE entries.  This project implements a modern REST HTTP API for FEDACH Dictionary and FEDWIRE Dictionary.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ACHParticipant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACHParticipant{}

// ACHParticipant ACHParticipant holds a FedACH dir routing record as defined by Fed ACH Format.  https://www.frbservices.org/EPaymentsDirectory/achFormat.html
type ACHParticipant struct {
	// The institution's routing number
	RoutingNumber *string `json:"routingNumber,omitempty"`
	// Main/Head Office or Branch  * `O` - Main * `B` - Branch
	OfficeCode *string `json:"officeCode,omitempty"`
	// Servicing Fed's main office routing number
	ServicingFRBNumber *string `json:"servicingFRBNumber,omitempty"`
	// The code indicating the ABA number to be used to route or send ACH items to the RDFI  * `0` - Institution is a Federal Reserve Bank * `1` - Send items to customer routing number * `2` - Send items to customer using new routing number field
	RecordTypeCode *string `json:"recordTypeCode,omitempty"`
	// Date of last revision  * YYYYMMDD * Blank
	Revised *string `json:"revised,omitempty"`
	// Financial Institution's new routing number resulting from a merger or renumber
	NewRoutingNumber *string `json:"newRoutingNumber,omitempty"`
	// Financial Institution Name
	CustomerName *string      `json:"customerName,omitempty"`
	AchLocation  *ACHLocation `json:"achLocation,omitempty"`
	// The Financial Institution's phone number
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// Code is based on the customers receiver code  * `1` - Receives Gov/Comm
	StatusCode *string `json:"statusCode,omitempty"`
	// Code is current view  * `1` - Current view
	ViewCode *string `json:"viewCode,omitempty"`
	// Normalized name of ACH participant
	CleanName *string `json:"cleanName,omitempty"`
	Logo      *Logo   `json:"logo,omitempty"`
}

// NewACHParticipant instantiates a new ACHParticipant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACHParticipant() *ACHParticipant {
	this := ACHParticipant{}
	return &this
}

// NewACHParticipantWithDefaults instantiates a new ACHParticipant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACHParticipantWithDefaults() *ACHParticipant {
	this := ACHParticipant{}
	return &this
}

// GetRoutingNumber returns the RoutingNumber field value if set, zero value otherwise.
func (o *ACHParticipant) GetRoutingNumber() string {
	if o == nil || IsNil(o.RoutingNumber) {
		var ret string
		return ret
	}
	return *o.RoutingNumber
}

// GetRoutingNumberOk returns a tuple with the RoutingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetRoutingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingNumber) {
		return nil, false
	}
	return o.RoutingNumber, true
}

// HasRoutingNumber returns a boolean if a field has been set.
func (o *ACHParticipant) HasRoutingNumber() bool {
	if o != nil && !IsNil(o.RoutingNumber) {
		return true
	}

	return false
}

// SetRoutingNumber gets a reference to the given string and assigns it to the RoutingNumber field.
func (o *ACHParticipant) SetRoutingNumber(v string) {
	o.RoutingNumber = &v
}

// GetOfficeCode returns the OfficeCode field value if set, zero value otherwise.
func (o *ACHParticipant) GetOfficeCode() string {
	if o == nil || IsNil(o.OfficeCode) {
		var ret string
		return ret
	}
	return *o.OfficeCode
}

// GetOfficeCodeOk returns a tuple with the OfficeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetOfficeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OfficeCode) {
		return nil, false
	}
	return o.OfficeCode, true
}

// HasOfficeCode returns a boolean if a field has been set.
func (o *ACHParticipant) HasOfficeCode() bool {
	if o != nil && !IsNil(o.OfficeCode) {
		return true
	}

	return false
}

// SetOfficeCode gets a reference to the given string and assigns it to the OfficeCode field.
func (o *ACHParticipant) SetOfficeCode(v string) {
	o.OfficeCode = &v
}

// GetServicingFRBNumber returns the ServicingFRBNumber field value if set, zero value otherwise.
func (o *ACHParticipant) GetServicingFRBNumber() string {
	if o == nil || IsNil(o.ServicingFRBNumber) {
		var ret string
		return ret
	}
	return *o.ServicingFRBNumber
}

// GetServicingFRBNumberOk returns a tuple with the ServicingFRBNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetServicingFRBNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ServicingFRBNumber) {
		return nil, false
	}
	return o.ServicingFRBNumber, true
}

// HasServicingFRBNumber returns a boolean if a field has been set.
func (o *ACHParticipant) HasServicingFRBNumber() bool {
	if o != nil && !IsNil(o.ServicingFRBNumber) {
		return true
	}

	return false
}

// SetServicingFRBNumber gets a reference to the given string and assigns it to the ServicingFRBNumber field.
func (o *ACHParticipant) SetServicingFRBNumber(v string) {
	o.ServicingFRBNumber = &v
}

// GetRecordTypeCode returns the RecordTypeCode field value if set, zero value otherwise.
func (o *ACHParticipant) GetRecordTypeCode() string {
	if o == nil || IsNil(o.RecordTypeCode) {
		var ret string
		return ret
	}
	return *o.RecordTypeCode
}

// GetRecordTypeCodeOk returns a tuple with the RecordTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetRecordTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordTypeCode) {
		return nil, false
	}
	return o.RecordTypeCode, true
}

// HasRecordTypeCode returns a boolean if a field has been set.
func (o *ACHParticipant) HasRecordTypeCode() bool {
	if o != nil && !IsNil(o.RecordTypeCode) {
		return true
	}

	return false
}

// SetRecordTypeCode gets a reference to the given string and assigns it to the RecordTypeCode field.
func (o *ACHParticipant) SetRecordTypeCode(v string) {
	o.RecordTypeCode = &v
}

// GetRevised returns the Revised field value if set, zero value otherwise.
func (o *ACHParticipant) GetRevised() string {
	if o == nil || IsNil(o.Revised) {
		var ret string
		return ret
	}
	return *o.Revised
}

// GetRevisedOk returns a tuple with the Revised field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetRevisedOk() (*string, bool) {
	if o == nil || IsNil(o.Revised) {
		return nil, false
	}
	return o.Revised, true
}

// HasRevised returns a boolean if a field has been set.
func (o *ACHParticipant) HasRevised() bool {
	if o != nil && !IsNil(o.Revised) {
		return true
	}

	return false
}

// SetRevised gets a reference to the given string and assigns it to the Revised field.
func (o *ACHParticipant) SetRevised(v string) {
	o.Revised = &v
}

// GetNewRoutingNumber returns the NewRoutingNumber field value if set, zero value otherwise.
func (o *ACHParticipant) GetNewRoutingNumber() string {
	if o == nil || IsNil(o.NewRoutingNumber) {
		var ret string
		return ret
	}
	return *o.NewRoutingNumber
}

// GetNewRoutingNumberOk returns a tuple with the NewRoutingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetNewRoutingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.NewRoutingNumber) {
		return nil, false
	}
	return o.NewRoutingNumber, true
}

// HasNewRoutingNumber returns a boolean if a field has been set.
func (o *ACHParticipant) HasNewRoutingNumber() bool {
	if o != nil && !IsNil(o.NewRoutingNumber) {
		return true
	}

	return false
}

// SetNewRoutingNumber gets a reference to the given string and assigns it to the NewRoutingNumber field.
func (o *ACHParticipant) SetNewRoutingNumber(v string) {
	o.NewRoutingNumber = &v
}

// GetCustomerName returns the CustomerName field value if set, zero value otherwise.
func (o *ACHParticipant) GetCustomerName() string {
	if o == nil || IsNil(o.CustomerName) {
		var ret string
		return ret
	}
	return *o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetCustomerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerName) {
		return nil, false
	}
	return o.CustomerName, true
}

// HasCustomerName returns a boolean if a field has been set.
func (o *ACHParticipant) HasCustomerName() bool {
	if o != nil && !IsNil(o.CustomerName) {
		return true
	}

	return false
}

// SetCustomerName gets a reference to the given string and assigns it to the CustomerName field.
func (o *ACHParticipant) SetCustomerName(v string) {
	o.CustomerName = &v
}

// GetAchLocation returns the AchLocation field value if set, zero value otherwise.
func (o *ACHParticipant) GetAchLocation() ACHLocation {
	if o == nil || IsNil(o.AchLocation) {
		var ret ACHLocation
		return ret
	}
	return *o.AchLocation
}

// GetAchLocationOk returns a tuple with the AchLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetAchLocationOk() (*ACHLocation, bool) {
	if o == nil || IsNil(o.AchLocation) {
		return nil, false
	}
	return o.AchLocation, true
}

// HasAchLocation returns a boolean if a field has been set.
func (o *ACHParticipant) HasAchLocation() bool {
	if o != nil && !IsNil(o.AchLocation) {
		return true
	}

	return false
}

// SetAchLocation gets a reference to the given ACHLocation and assigns it to the AchLocation field.
func (o *ACHParticipant) SetAchLocation(v ACHLocation) {
	o.AchLocation = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *ACHParticipant) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *ACHParticipant) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *ACHParticipant) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ACHParticipant) GetStatusCode() string {
	if o == nil || IsNil(o.StatusCode) {
		var ret string
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ACHParticipant) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given string and assigns it to the StatusCode field.
func (o *ACHParticipant) SetStatusCode(v string) {
	o.StatusCode = &v
}

// GetViewCode returns the ViewCode field value if set, zero value otherwise.
func (o *ACHParticipant) GetViewCode() string {
	if o == nil || IsNil(o.ViewCode) {
		var ret string
		return ret
	}
	return *o.ViewCode
}

// GetViewCodeOk returns a tuple with the ViewCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetViewCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ViewCode) {
		return nil, false
	}
	return o.ViewCode, true
}

// HasViewCode returns a boolean if a field has been set.
func (o *ACHParticipant) HasViewCode() bool {
	if o != nil && !IsNil(o.ViewCode) {
		return true
	}

	return false
}

// SetViewCode gets a reference to the given string and assigns it to the ViewCode field.
func (o *ACHParticipant) SetViewCode(v string) {
	o.ViewCode = &v
}

// GetCleanName returns the CleanName field value if set, zero value otherwise.
func (o *ACHParticipant) GetCleanName() string {
	if o == nil || IsNil(o.CleanName) {
		var ret string
		return ret
	}
	return *o.CleanName
}

// GetCleanNameOk returns a tuple with the CleanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetCleanNameOk() (*string, bool) {
	if o == nil || IsNil(o.CleanName) {
		return nil, false
	}
	return o.CleanName, true
}

// HasCleanName returns a boolean if a field has been set.
func (o *ACHParticipant) HasCleanName() bool {
	if o != nil && !IsNil(o.CleanName) {
		return true
	}

	return false
}

// SetCleanName gets a reference to the given string and assigns it to the CleanName field.
func (o *ACHParticipant) SetCleanName(v string) {
	o.CleanName = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *ACHParticipant) GetLogo() Logo {
	if o == nil || IsNil(o.Logo) {
		var ret Logo
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHParticipant) GetLogoOk() (*Logo, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *ACHParticipant) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given Logo and assigns it to the Logo field.
func (o *ACHParticipant) SetLogo(v Logo) {
	o.Logo = &v
}

func (o ACHParticipant) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACHParticipant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoutingNumber) {
		toSerialize["routingNumber"] = o.RoutingNumber
	}
	if !IsNil(o.OfficeCode) {
		toSerialize["officeCode"] = o.OfficeCode
	}
	if !IsNil(o.ServicingFRBNumber) {
		toSerialize["servicingFRBNumber"] = o.ServicingFRBNumber
	}
	if !IsNil(o.RecordTypeCode) {
		toSerialize["recordTypeCode"] = o.RecordTypeCode
	}
	if !IsNil(o.Revised) {
		toSerialize["revised"] = o.Revised
	}
	if !IsNil(o.NewRoutingNumber) {
		toSerialize["newRoutingNumber"] = o.NewRoutingNumber
	}
	if !IsNil(o.CustomerName) {
		toSerialize["customerName"] = o.CustomerName
	}
	if !IsNil(o.AchLocation) {
		toSerialize["achLocation"] = o.AchLocation
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !IsNil(o.ViewCode) {
		toSerialize["viewCode"] = o.ViewCode
	}
	if !IsNil(o.CleanName) {
		toSerialize["cleanName"] = o.CleanName
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	return toSerialize, nil
}

type NullableACHParticipant struct {
	value *ACHParticipant
	isSet bool
}

func (v NullableACHParticipant) Get() *ACHParticipant {
	return v.value
}

func (v *NullableACHParticipant) Set(val *ACHParticipant) {
	v.value = val
	v.isSet = true
}

func (v NullableACHParticipant) IsSet() bool {
	return v.isSet
}

func (v *NullableACHParticipant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACHParticipant(val *ACHParticipant) *NullableACHParticipant {
	return &NullableACHParticipant{value: val, isSet: true}
}

func (v NullableACHParticipant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACHParticipant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
