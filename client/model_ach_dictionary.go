/*
FED API

FED API is designed to create FEDACH and FEDWIRE dictionaries.  The FEDACH dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive ACH entries.  The FEDWIRE dictionary contains receiving depository financial institutions (RDFI’s) which are qualified to receive WIRE entries.  This project implements a modern REST HTTP API for FEDACH Dictionary and FEDWIRE Dictionary.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ACHDictionary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ACHDictionary{}

// ACHDictionary Search results containing ACHDictionary of Participants
type ACHDictionary struct {
	ACHParticipants []ACHParticipant `json:"ACHParticipants,omitempty"`
}

// NewACHDictionary instantiates a new ACHDictionary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACHDictionary() *ACHDictionary {
	this := ACHDictionary{}
	return &this
}

// NewACHDictionaryWithDefaults instantiates a new ACHDictionary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACHDictionaryWithDefaults() *ACHDictionary {
	this := ACHDictionary{}
	return &this
}

// GetACHParticipants returns the ACHParticipants field value if set, zero value otherwise.
func (o *ACHDictionary) GetACHParticipants() []ACHParticipant {
	if o == nil || IsNil(o.ACHParticipants) {
		var ret []ACHParticipant
		return ret
	}
	return o.ACHParticipants
}

// GetACHParticipantsOk returns a tuple with the ACHParticipants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACHDictionary) GetACHParticipantsOk() ([]ACHParticipant, bool) {
	if o == nil || IsNil(o.ACHParticipants) {
		return nil, false
	}
	return o.ACHParticipants, true
}

// HasACHParticipants returns a boolean if a field has been set.
func (o *ACHDictionary) HasACHParticipants() bool {
	if o != nil && !IsNil(o.ACHParticipants) {
		return true
	}

	return false
}

// SetACHParticipants gets a reference to the given []ACHParticipant and assigns it to the ACHParticipants field.
func (o *ACHDictionary) SetACHParticipants(v []ACHParticipant) {
	o.ACHParticipants = v
}

func (o ACHDictionary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ACHDictionary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ACHParticipants) {
		toSerialize["ACHParticipants"] = o.ACHParticipants
	}
	return toSerialize, nil
}

type NullableACHDictionary struct {
	value *ACHDictionary
	isSet bool
}

func (v NullableACHDictionary) Get() *ACHDictionary {
	return v.value
}

func (v *NullableACHDictionary) Set(val *ACHDictionary) {
	v.value = val
	v.isSet = true
}

func (v NullableACHDictionary) IsSet() bool {
	return v.isSet
}

func (v *NullableACHDictionary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACHDictionary(val *ACHDictionary) *NullableACHDictionary {
	return &NullableACHDictionary{value: val, isSet: true}
}

func (v NullableACHDictionary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACHDictionary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
